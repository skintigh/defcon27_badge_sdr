#some math tests used when debugging versions of compute

#import compute, guesser, sys
import compute_experimental as compute
import guesser, sys

capture = "2 3 5 7 5 7 3 3 6 1 2 3 1 3 6 7 0 7 3 2 3 7 6 2 6 7 4 7 1 6 7 3 0 4 1 4 4 2 7 4 6 2 0 2 0 7 6 6 1 6 4 1 3 1 4 4 0 7 7 3 5 2 7 7 1 0 4 3 6 0 0 0 0 0"
'''
> u ff00000000000000000xFF00000000000000
[*] Loading Data: 0xDFDFD0D0D0D0D0D0D0D0D0D0D0D0D0D02E2E2E2E2E2E
err upd write
[*] Loading Data: 0xDFDFD0D0D0D0D0D0D0D0D0D0D0D0D0D02E2E2E2E2E2E

new even rule
Found:         48 116  39  32  40 223   8   8   8   8   8   8   8   8   8   8 
Hex:          x30 x74 x27 x20 x28 xdf x08 x08 x08 x08 x08 x08 x08 x08 x08 x08 
ASCII:         0   t   '       (   ?   ?   ?   ?   ?   ?   ?   ?   ?   ?   ?   
[48, 116, 39, 32, 40, 223, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]

without
Found:         48 116   7   0   8 255   0   0   0   0   0   0   0   0   0   0 
Hex:          x30 x74 x07 x00 x08 xff x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 
ASCII:         0   t   ?   ?   ?   ?   ?   ?   ?   ?   ?   ?   ?   ?   ?   ?   
[48, 116, 7, 0, 8, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

'''
#correct_symbols = capture.replace(" ",",")


capture="0 6 7 5 5 6 4 3 3 0 4 1 4 2 7 5 0 7 3 2 5 4 1 2 6 5 1 4 6 5 5 7 4 3 3 6 0 0 2 0 4 0 2 0 2 1 4 4 7 4 6 7 3 4 3 1 5 5 7 3 5 2 7 7 5 2 5 1 4 4 3 6 0 0"
'''
> u d0d1d2d3d4d5d6d7d80xD0D1D2D3FFFFFFFF
[*] Loading Data: 0xDDD0DDD1DDD2DDD3DFDFDFDFDFDFDFDF2E2E2E2E2E2E
err upd write
[*] Loading Data: 0xDDD0DDD1DDD2DDD3DFDFDFDFDFDFDFDF2E2E2E2E2E2E
= D0 D1 D2 D3 FF FF FF FF EEEEEE

Found:         59  48   8   0   8 208  81 208  83 247 119 255 245   2   0   0 
Hex:          x3b x30 x08 x00 x08 xd0 x51 xd0 x53 xf7 x77 xff xf5 x02 x00 x00 
ASCII:         ;   0   ?   ?   ?   ?   Q   ?   S   ?   w   ?   ?   ?   ?   ?   
[59, 48, 8, 0, 8, 208, 81, 208, 83, 247, 119, 255, 245, 2, 0, 0

after new even rule
Found:         59  48  40  32  40 240 113 240 115 215 117 255 213 130 128 128 
Hex:          x3b x30 x28 x20 x28 xf0 x71 xf0 x73 xd7 x75 xff xd5 x82 x80 x80 
ASCII:         ;   0   (       (   ?   q   ?   s   ?   u   ?   ?   ?   ?   ?   

'''

capture = "4 2 3 7 0 4 6 3 2 7 2 3 4 1 5 5 0 7 3 2 5 4 3 5 7 0 3 6 6 3 2 0 3 0 7 6 4 3 0 1 1 7 7 2 4 3 2 3 4 5 5 7 1 3 2 3 5 5 7 3 5 2 7 7 5 0 4 3 6 0 0 0 4 4"
data_bytes = [81,  24,  9 ,0]
data_bytes = data_bytes + [8]
#data_bytes = data_bytes + [0x0, 0x0, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xf0, 0, 0,0]
'''

> u 0000ffff0000ffff000x0000FFFF000FFFF0
[*] Loading Data: 0xD0D0D0D0DFDFDFDFD0D0D0DFDFDFDFD02E2E2E2E2E2E
err upd write
[*] Loading Data: 0xD0D0D0D0DFDFDFDFD0D0D0DFDFDFDFD02E2E2E2E2E2E

0x 0000 FFFF 000 FFFF 0
Found:         81  24   9   0   8   0   0 255 119   0  15 255 240   2   0   0 
Hex:          x51 x18 x09 x00 x08 x00 x00 xff x77 x00 x0f xff xf0 x02 x00 x00 
ASCII:         Q      ?   ?   ?   ?   ?   ?   w   ?   ?   ?   ?   ?   ?   ?   

'''

capture = "6 7 1 3 3 6 3 6 1 0 3 2 2 1 5 5 0 7 3 2 5 4 3 5 7 0 3 6 2 7 6 4 7 4 3 2 4 3 0 1 5 3 7 2 0 7 6 7 4 5 1 3 1 3 2 3 5 5 7 3 5 2 7 7 1 4 0 3 6 4 0 0 4 4"
data_bytes = [154, 167, 9 ,0]
data_bytes = data_bytes + [8]
data_bytes = data_bytes + [0x0, 0x0, 0x55, 0x55, 0x00, 0x05, 0x55, 0x50, 0, 0,0]
'''

> u 0000555500005555000x0000555500055550
[*] Loading Data: 0xD0D0D0D0D5D5D5D5D0D0D0D5D5D5D5D02E2E2E2E2E2E
err upd write
[*] Loading Data: 0xD0D0D0D0D5D5D5D5D0D0D0D5D5D5D5D02E2E2E2E2E2E

Found:        154 167   9   0   8   0   0  85 213   0   5  85  80   2   0   0 
Hex:          x9a xa7 x09 x00 x08 x00 x00 x55 xd5 x00 x05 x55 x50 x02 x00 x00 
ASCII:         ?   ?   ?   ?   ?   ?   ?   U   ?   ?   ?   U   P   ?   ?   ?   
'''

capture="4 0 2 1 4 1 7 3 0 5 2 1 4 2 7 5 0 7 3 2 1 0 7 1 3 4 7 2 0 4 3 7 4 0 5 0 6 5 2 7 1 6 2 0 2 1 4 4 7 4 6 7 3 4 3 1 5 5 7 3 5 2 7 7 5 0 0 3 2 4 4 4 4 4"
data_bytes = [221, 27, 10 ,0]
data_bytes = data_bytes + [8]
data_bytes = data_bytes + [0xAA, 0xAA, 0xAA, 0xAA, 0xff,0xff,0xff,0xff, 0, 0,0]

'''
> u aaaaaaaaaaaaaaaaaa0xAAAAAAAAFFFFFFFF
[*] Loading Data: 0xDADADADADADADADADFDFDFDFDFDFDFDF2E2E2E2E2E2E
err upd write
[*] Loading Data: 0xDADADADADADADADADFDFDFDFDFDFDFDF2E2E2E2E2E2E
AAAAAAAA FFFFFFFF

zeros_symbols: [2, 3, 3, 6, 7, 7, 0, 1, 3, 2, 4, 2, 2, 2, 7, 5, 0, 3, 3, 2, 5, 4, 3, 5, 7, 0, 3, 6, 4, 0, 7, 3, 0, 4, 1, 4, 4, 2, 7, 4, 6, 2, 0, 2, 0, 7, 6, 6, 1, 6, 4, 1, 3, 1, 4, 4, 0, 7, 7, 3, 5, 2, 7, 7, 7, 7, 7, 3, 0, 3, 1, 6, 4, 4, 0, 0, 0, 0, 0, 0]
delta_1347:    [6, 2, 2, 6, 2, 2, 2, 6, 2, 6, 2, 6, 6, 6, 2, 6, 2, 2, 2, 6, 6, 2, 2, 6, 2, 2, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2]
delta_2:       [7, 1, 1, 7, 1, 1, 3, 5, 1, 7, 3, 7, 7, 7, 1, 5, 3, 1, 1, 7, 5, 3, 1, 5, 1, 3, 1, 7, 3, 3, 1, 1, 3, 3, 5, 3, 3, 7, 1, 3, 7, 7, 3, 7, 3, 1, 7, 7, 5, 7, 3, 5, 1, 5, 3, 3, 3, 1, 1, 1, 5, 7, 1, 1, 1, 1, 1, 1, 3, 1, 5, 7, 3, 3, 3, 3, 3, 3, 3, 3]
delta_6:       [1, 7, 7, 1, 7, 7, 1, 7, 7, 1, 1, 1, 1, 1, 7, 7, 1, 7, 7, 1, 7, 1, 7, 7, 7, 1, 7, 1, 1, 1, 7, 7, 1, 1, 7, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1, 7, 7, 7, 1, 1, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1]
bytes        : [221, 27, 10, 0, 8, 170, 170, 170, 170, 255, 255, 255, 255, 0, 0, 0, 0, 0]
nibbles      : [d,    d,    b,    1,    a,    0,    0,    0,    8,    0,    a,    a,    a,    a,    a,    a,    a,    a,    f,    f,    f,    f,    f,    f,    f,    f,    0,    0,    0,    0,    0,    0,  ] 
nips         : [1, 3, 1, 3, 3, 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 
                                                                                                                                           *     *  *  *        *  *        *               
odd_bits     : [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
               |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           
even_bits    : [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
even_single  : [0, 4, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
even_10001   : [0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0]
even_10001x  : [0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0]
even_10001000x [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
               |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           
odd_single_d0: [6, 2, 2, 6, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d1: [0, 1, 1, 7, 1, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 7, 7, 3, 7, 3, 1, 7, 7, 5, 7, 3, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d2: [0, 0, 2, 6, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d3: [0, 0, 0, 6, 2, 2, 2, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d5: [0, 0, 0, 0, 0, 7, 1, 7, 7, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1, 7, 7, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
odd_single_d6: [0, 0, 0, 0, 0, 0, 2, 6, 2, 6, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0]
odd_11       : [0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1001000  : [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_100010   : [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1000100  : [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1000010  : [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1000001  : [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
pos_odd_merge: [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
diff         : [6, 3, 1, 5, 3, 6, 1, 6, 3, 5, 2, 1, 6, 0, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 5, 5, 5, 5, 0, 6, 6, 2, 2, 2, 2, 6, 6, 6, 2, 4, 5, 1, 3, 3, 2, 0, 0, 0, 0, 0, 0]
sum          : [4, 0, 2, 1, 4, 1, 7, 3, 0, 5, 2, 1, 4, 2, 7, 5, 0, 7, 3, 2, 1, 0, 7, 1, 3, 4, 7, 2, 0, 4, 3, 7, 4, 0, 5, 0, 6, 5, 2, 7, 1, 2, 2, 4, 6, 5, 4, 4, 3, 0, 6, 7, 7, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]
expected     : [4, 0, 2, 1, 4, 1, 7, 3, 0, 5, 2, 1, 4, 2, 7, 5, 0, 7, 3, 2, 1, 0, 7, 1, 3, 4, 7, 2, 0, 4, 3, 7, 4, 0, 5, 0, 6, 5, 2, 7, 1, 6, 2, 0, 2, 1, 4, 4, 7, 4, 6, 7, 3, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]

sum          : [4, 0, 2, 1, 4, 1, 7, 3, 0, 5, 2, 1, 4, 2, 7, 5, 0, 7, 3, 2, 1, 0, 7, 1, 3, 4, 7, 2, 0, 4, 3, 7, 4, 0, 5, 0, 6, 5, 2, 7, 1, 2, 2, 4, 6, 5, 4, 4, 3, 0, 6, 7, 7, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]
expected     : [4, 0, 2, 1, 4, 1, 7, 3, 0, 5, 2, 1, 4, 2, 7, 5, 0, 7, 3, 2, 1, 0, 7, 1, 3, 4, 7, 2, 0, 4, 3, 7, 4, 0, 5, 0, 6, 5, 2, 7, 1, 6, 2, 0, 2, 1, 4, 4, 7, 4, 6, 7, 3, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]
                                                                                                                                           *     *  *  *        *  *        *                                   
               |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |    
'''

'''
capture = "2 5 0 7 0 6 3 0 7 5 4 2 1 4 7 5 0 7 3 2 7 3 2 6 0 0 1 0 2 6 5 1 6 2 3 2 6 0 1 6 4 0 2 0 2 1 4 4 7 4 6 7 3 4 3 1 5 5 7 3 5 2 7 7 7 5 0 4 0 5 2 3 2 4"
#capture = "2 7 5 5 6 6 4 6 7 5 4 2 1 4 7 5 0 7 3 2 7 3 2 6 0 0 1 0 2 6 5 1 6 2 3 2 6 0 1 6 4 0 2 0 2 1 4 4 7 4 6 7 3 4 3 1 5 5 7 3 5 2 7 7 5 2 7 0 2 2 3 5 6 0"

data_bytes = [124, 225, 8 ,0]
data_bytes = data_bytes + [8]
data_bytes = data_bytes + [0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0, 0,0]
'''
'''
> u 5555555555555555550x55555555FFFFFFFF
[*] Loading Data: 0xD5D5D5D5D5D5D5D5DFDFDFDFDFDFDFDF2E2E2E2E2E2E
err upd write
[*] Loading Data: 0xD5D5D5D5D5D5D5D5DFDFDFDFDFDFDFDF2E2E2E2E2E2E

Found:        124 225   8   0   8  85 253  95 215 247 119 245 245   2   0   0 
Hex:          x7c xe1 x08 x00 x08 x55 xfd x5f xd7 xf7 x77 xf5 xf5 x02 x00 x00 

zeros_symbols: [2, 3, 3, 6, 7, 7, 0, 1, 3, 2, 4, 2, 2, 2, 7, 5, 0, 3, 3, 2, 5, 4, 3, 5, 7, 0, 3, 6, 4, 0, 7, 3, 0, 4, 1, 4, 4, 2, 7, 4, 6, 2, 0, 2, 0, 7, 6, 6, 1, 6, 4, 1, 3, 1, 4, 4, 0, 7, 7, 3, 5, 2, 7, 7, 7, 7, 7, 3, 0, 3, 1, 6, 4, 4, 0, 0, 0, 0, 0, 0]
delta_1347:    [6, 2, 2, 6, 2, 2, 2, 6, 2, 6, 2, 6, 6, 6, 2, 6, 2, 2, 2, 6, 6, 2, 2, 6, 2, 2, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2]
delta_2:       [7, 1, 1, 7, 1, 1, 3, 5, 1, 7, 3, 7, 7, 7, 1, 5, 3, 1, 1, 7, 5, 3, 1, 5, 1, 3, 1, 7, 3, 3, 1, 1, 3, 3, 5, 3, 3, 7, 1, 3, 7, 7, 3, 7, 3, 1, 7, 7, 5, 7, 3, 5, 1, 5, 3, 3, 3, 1, 1, 1, 5, 7, 1, 1, 1, 1, 1, 1, 3, 1, 5, 7, 3, 3, 3, 3, 3, 3, 3, 3]
delta_6:       [1, 7, 7, 1, 7, 7, 1, 7, 7, 1, 1, 1, 1, 1, 7, 7, 1, 7, 7, 1, 7, 1, 7, 7, 7, 1, 7, 1, 1, 1, 7, 7, 1, 1, 7, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1, 7, 7, 7, 1, 1, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1]
bytes        : [124, 225, 8, 0, 8, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0]
nibbles      : [c,    7,    1,    e,    8,    0,    0,    0,    8,    0,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    0,    0,    0,    0,    0,    0,  ] 
nips         : [0, 3, 3, 1, 1, 0, 2, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 

odd_bits     : [0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
               |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           
even_bits    : [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
even_single  : [0, 4, 4, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
even_10001   : [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
even_10001x  : [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
even_10001000x [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
               |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           |           
odd_single_d0: [0, 2, 2, 6, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 2, 6, 2, 2, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d1: [0, 0, 1, 7, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 3, 1, 7, 3, 3, 1, 1, 3, 3, 5, 3, 3, 7, 1, 3, 7, 7, 3, 7, 3, 1, 7, 7, 5, 7, 3, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d2: [0, 0, 0, 6, 2, 2, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2, 2, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d3: [0, 0, 0, 0, 2, 2, 2, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 2, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_single_d5: [0, 0, 0, 0, 0, 0, 1, 7, 7, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1, 1, 1, 7, 7, 1, 1, 7, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1, 7, 7, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
odd_single_d6: [0, 0, 0, 0, 0, 0, 0, 6, 2, 6, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0]
odd_11       : [0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1001000  : [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_100010   : [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1000100  : [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1000010  : [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
odd_1000001  : [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
pos_odd_merge: [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
diff         : [0, 6, 3, 7, 7, 1, 5, 1, 4, 5, 0, 0, 1, 6, 0, 0, 0, 4, 0, 0, 6, 1, 1, 7, 7, 4, 6, 2, 6, 6, 2, 2, 6, 2, 6, 6, 2, 2, 2, 2, 6, 2, 2, 2, 6, 6, 6, 6, 2, 2, 2, 6, 4, 5, 1, 3, 3, 2, 0, 0, 0, 0, 0, 0]
sum          : [2, 5, 0, 7, 0, 6, 3, 0, 7, 5, 4, 2, 1, 4, 7, 5, 0, 7, 3, 2, 7, 3, 2, 6, 0, 4, 5, 4, 6, 2, 5, 1, 2, 2, 3, 6, 2, 0, 5, 2, 0, 0, 6, 0, 2, 1, 0, 0, 7, 4, 2, 3, 7, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]
expected     : [2, 5, 0, 7, 0, 6, 3, 0, 7, 5, 4, 2, 1, 4, 7, 5, 0, 7, 3, 2, 7, 3, 2, 6, 0, 0, 1, 0, 2, 6, 5, 1, 6, 2, 3, 2, 6, 0, 1, 6, 4, 0, 2, 0, 2, 1, 4, 4, 7, 4, 6, 7, 3, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]

sum          : [2, 5, 0, 7, 0, 6, 3, 0, 7, 5, 4, 2, 1, 4, 7, 5, 0, 7, 3, 2, 7, 3, 2, 6, 0, 4, 5, 4, 6, 2, 5, 1, 2, 2, 3, 6, 2, 0, 5, 2, 0, 0, 6, 0, 2, 1, 0, 0, 7, 4, 2, 3, 7, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]
expected     : [2, 5, 0, 7, 0, 6, 3, 0, 7, 5, 4, 2, 1, 4, 7, 5, 0, 7, 3, 2, 7, 3, 2, 6, 0, 0, 1, 0, 2, 6, 5, 1, 6, 2, 3, 2, 6, 0, 1, 6, 4, 0, 2, 0, 2, 1, 4, 4, 7, 4, 6, 7, 3, 4, 3, 1, 5, 5, 7, 3, 5, 2, 7, 7]
                                                                                           *  *  *  *  *        *        *  *     *  *  *     *           *  *        *  *  *                                   
delta_[6, 2, 2, 6, 2, 2, 2, 6, 2, 6, 2, 6, 6, 6, 2, 6, 2, 2, 2, 6, 6, 2, 2, 6, 2, 2, 2, 6, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2]\
                            2, 6, 2, 2, 6, 2, 2, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 2, 6, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2]
d                                                                                           
               |0          |4          |8          |           |16         |           |24         |28         |32         |36         |           |           |           |           |           |           |      
'''
correct_symbols = [int(c) for c in capture.split(" ")]
print(correct_symbols)
solution = guesser.solver([0]*(16), correct_symbols[0:4*16], debug=False, ignore=8, print_error=False, print_result=True)
print(solution)
print(data_bytes)
print(solution==data_bytes,"\n\n\n")


correct_symbols = [int(c) for c in capture.split(" ")]
print(correct_symbols)
solution = guesser.solver([0]*(16+3), [0,0,4,4,2,7,7,4,6,7,5,6]+correct_symbols[0:4*16], debug=False, ignore=8-3, print_error=False, print_result=True)
print(solution)
print(data_bytes)
print(solution[3:]==data_bytes,"\n\n\n")
#sys.exit()


expected = correct_symbols[0:4*16]
data_symbols2 = compute.compute(data_bytes, expected, debug=True, ignore=8, print_error=True)
print("               "+ "|           "*17)


print("test with 3 bytes of preamble")
expected = correct_symbols[0:4*16]
data_symbols2 = compute.compute([0x80,0x87,0]+data_bytes, [0,0,4,4,2,7,7,4,6,7,5,6]+expected, debug=True, ignore=8-3, print_error=True)
print("               "+ "|           "*20)

sys.exit()



#first 4 data bytes: counter
data_bytes = [0x48,0xa0,0x05,0]
#length
data_bytes = data_bytes + [8]
#11 bytes of data
#data_bytes = data_bytes + [0xD0, 0xD1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0, 0] #9 bytes set  segment 70/128 0xD051D053D455D6D5  oops forgot the Ds are needed looks like my math is still bad...

#but nibbles are swapped?
data_bytes = data_bytes + [0x0D, 0x1D, 0x2D, 0x3D, 0x4D, 0x5D, 0x6D, 0x7D, 0x8D, 0, 0] #9 bytes set  segment 70/128 0xD051D053D455D6D5  oops forgot the Ds are needed looks like my math is still bad...

#data_symbols1 = encoder.compute(data_bytes, skip=0, debug=False, ignore=0)

correct_symbols = [2,7,3,0, 6,5,2,5, 2,3,3,2, 4,1,6,7, 0,7,3,2, 7,7,4,5,7,4,3,5,2,2,1,2,6,0,5,3,6,0,3,6,3,6,2,0,2,1,4,4,7,4,6,7,3,4,3,1,5,5,7,3,5,2,7,7,3,7,7,3,4,7,1,6,0,0]

#solution = guesser.solver(len(correct_symbols)//4*[0], correct_symbols, ignore=8, debug=False, print_error=False, print_result=False)  #ignore preamble
#for x in solution: print("%.2x"%x,end="")

expected = correct_symbols[0:4*16]
data_symbols2 = compute.compute(data_bytes, expected, debug=False, ignore=8, print_error=True)
print("               "+ "|           "*17)

print("\n"*4)
print("     "+ "|           "*17)
print ("real", correct_symbols[0:4*16])		
print ("comp", data_symbols2)
print("diff", end = " ")
for x in range(0,len(data_symbols2)):
	if correct_symbols[x] != data_symbols2[x]: print(" * ",end="")
	else: print("   ",end="")
print()

#p = [4,4,4,0,4,0,4,0,2,4,6,0,0,0,0,0,6,4,2,0,0,0,4,4,2,7,7,4,6,7,5,6] + data_symbols1
#solution = guesser.solver([0]*(8+16), p, debug=False, ignore=0, print_error=False, print_result=True)
#print(solution)
print("computed:")
p = [4,4,4,0,4,0,4,0,2,4,6,0,0,0,0,0,6,4,2,0,0,0,4,4,2,7,7,4,6,7,5,6] + data_symbols2 
solution = guesser.solver([0]*(8+16), p, debug=False, ignore=0, print_error=False, print_result=True)
print("correct symbols for data d0 d1 d2 d3 d4 d5 d6 d7 d8 ...")
p = [4,4,4,0,4,0,4,0,2,4,6,0,0,0,0,0,6,4,2,0,0,0,4,4,2,7,7,4,6,7,5,6] + correct_symbols
solution = guesser.solver([0]*(8+16), p, debug=False, ignore=0, print_error=False, print_result=True)
'''
#another test
print("should be 01 23 45 67 89 ab cd ef...")
p = [4,4,4,0,4,0,4,0,2,4,6,0,0,0,0,0,6,4,2,0,0,0,4,4,2,7,7,4,6,7,5,6] + [6,1,2,4,7,6,3,2,0,3,1,3,1,4,0,7,0,7,3,2,1,4,1,0,5,0,0,6,6,0,7,3,7,0,6,2,0,7,4,0,4,0,2,0,2,1,4,4,7,4,6,7,3,4,3,1,5,5,7,3,5,2,7,7,3,5,0,0,0,5,6,7,2,4]
solution = guesser.solver([0]*(8+16), p, debug=False, ignore=0, print_error=False, print_result=True)
print("actual: D0 51 D0 53 D4 55 D6 D5")
'''